bigx<-wdat[,-c(9)]
#reference to professor's code
#setwd('~/Desktop/aml_hw1')
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
getwd()
.libPaths(c("C:/Users/Sharo/R/win-library", .libPaths()))
.libPaths(c("C:/Users/Sharo/R/win-library", .libPaths()))
.libPaths(c("C:/Users/Sharo/R/win-library", .libPaths()))
.libPaths(c("C:/Users/Sharo/R/win-library", .libPaths()))
.libPaths()
install.packages("klaR")
install.packages("caret")
#reference to professor's code
#setwd('~/Desktop/aml_hw1')
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-wdat[,9]
trscore<-array(dim=10)
tescore<-array(dim=10)
for (wi in 1:10){
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
nbx<-bigx
ntrbx<-nbx[wtd, ]
ntrby<-bigy[wtd]
trposflag<-ntrby>0
ptregs<-ntrbx[trposflag, ]
ntregs<-ntrbx[!trposflag,]
ntebx<-nbx[-wtd, ]
nteby<-bigy[-wtd]
ptrmean<-sapply(ptregs, mean, na.rm=TRUE)
ntrmean<-sapply(ntregs, mean, na.rm=TRUE)
ptrsd<-sapply(ptregs, sd, na.rm=TRUE)
ntrsd<-sapply(ntregs, sd, na.rm=TRUE)
ptroffsets<-t(t(ntrbx)-ptrmean)
ptrscales<-t(t(ptroffsets)/ptrsd)
ptrlogs<--(1/2)*rowSums(apply(ptrscales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ptrsd))
ntroffsets<-t(t(ntrbx)-ntrmean)
ntrscales<-t(t(ntroffsets)/ntrsd)
ntrlogs<--(1/2)*rowSums(apply(ntrscales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ntrsd))
ptrp<-sum(ntrby)/length(ntrby)
ntrp<-sum(!ntrby)/length(ntrby)
ptrprior<-ptrlogs + log(ptrp)
ntrprior<-ntrlogs + log(ntrp)
lvwtr<-ptrprior>ntrprior
gotrighttr<-lvwtr==ntrby
trscore[wi]<-sum(gotrighttr)/(sum(gotrighttr)+sum(!gotrighttr))
pteoffsets<-t(t(ntebx)-ptrmean)
ptescales<-t(t(pteoffsets)/ptrsd)
ptelogs<--(1/2)*rowSums(apply(ptescales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ptrsd))
nteoffsets<-t(t(ntebx)-ntrmean)
ntescales<-t(t(nteoffsets)/ntrsd)
ntelogs<--(1/2)*rowSums(apply(ntescales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ntrsd))
lvwte<-ptelogs>ntelogs
gotright<-lvwte==nteby
tescore[wi]<-sum(gotright)/(sum(gotright)+sum(!gotright))
}
print(sum(ntrby))
print(!sum(ntrby))
print(length(ntrby))
print(sum(!ntrby))
ntrby<-bigy[wtd]
bigy[wtd]
wdat[,-c(9)]
wdat[,9]
print(c("Training score: ", mean(trscore)))
print(c("Testing score: ", mean(tescore)))
ptelogs
ptelogs>ntelogs
tescore[wi]<-sum(gotright)/(sum(gotright)+sum(!gotright))
sum(gotright)/(sum(gotright)+sum(!gotright))
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1B.R')
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
wdat[, 3][wdat[, 3] == 0] <- NA
wdat[, 4][wdat[, 4] == 0] <- NA
wdat[, 6][wdat[, 6] == 0] <- NA
wdat[, 8][wdat[, 8] == 0] <- NA
features<-wdat[,-c(9)]
labels<-wdat[,9]
trscore<-array(dim=10)
tescore<-array(dim=10)
for (wi in 1:10){
wtd<-createDataPartition(y=labels, p=.8, list=FALSE)
nbx<-features
ntrbx<-nbx[wtd, ]
ntrby<-labels[wtd]
trposflag<-ntrby>0
ptregs<-ntrbx[trposflag, ]
ntregs<-ntrbx[!trposflag,]
ntebx<-nbx[-wtd, ]
nteby<-labels[-wtd]
ptrmean<-sapply(ptregs, mean, na.rm=TRUE)
ntrmean<-sapply(ntregs, mean, na.rm=TRUE)
ptrsd<-sapply(ptregs, sd, na.rm=TRUE)
ntrsd<-sapply(ntregs, sd, na.rm=TRUE)
ptroffsets<-t(t(ntrbx)-ptrmean)
ptrscales<-t(t(ptroffsets)/ptrsd)
ptrlogs<--(1/2)*rowSums(apply(ptrscales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ptrsd))
ntroffsets<-t(t(ntrbx)-ntrmean)
ntrscales<-t(t(ntroffsets)/ntrsd)
ntrlogs<--(1/2)*rowSums(apply(ntrscales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ntrsd))
ptr_rate<-sum(ntrby)/length(ntrby)
ntr_rate<-sum(!ntrby)/length(ntrby)
ptr_prior<-ptrlogs + log(ptr_rate)
ntr_prior<-ntrlogs + log(ntr_rate)
lvwtr<-ptr_prior>ntr_prior
gotrighttr<-lvwtr==ntrby
trscore[wi]<-sum(gotrighttr)/(sum(gotrighttr)+sum(!gotrighttr))
pteoffsets<-t(t(ntebx)-ptrmean)
ptescales<-t(t(pteoffsets)/ptrsd)
ptelogs<--(1/2)*rowSums(apply(ptescales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ptrsd))
nteoffsets<-t(t(ntebx)-ntrmean)
ntescales<-t(t(nteoffsets)/ntrsd)
ntelogs<--(1/2)*rowSums(apply(ntescales,c(1, 2), function(x)x^2), na.rm=TRUE)-sum(log(ntrsd))
pte_prior<-ptelogs + log(ptr_rate)
nte_prior<-ntelogs + log(ntr_rate)
lvwte<-ptelogs>ntelogs
gotright<-lvwte==nteby
tescore[wi]<-sum(gotright)/(sum(gotright)+sum(!gotright))
}
print(c("Training score: ", mean(trscore)))
print(c("Testing score: ", mean(tescore)))
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1B.R')
as.factor(wdat[,9])
wdat[,9]
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1A.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1B.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1C.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1C.R')
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
teclasses<-predict(model,newdata=bigx[-wtd,])
result<-confusionMatrix(data=teclasses, bigy[-wtd])
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
warnings()
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1C.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1D.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1D.R')
svm<-svmlight(bigx[wtd,], bigy[wtd], pathsvm='/svm_light')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1D.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1D.R')
svm<-svmlight(bigx[wtd,], bigy[wtd], pathsvm='C:/Users/Sharo/Desktop/aml_hw1')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1D.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1B.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1A.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1C.R')
source('C:/Users/Sharo/Desktop/aml_hw1/hw1_1C.R')
install.packages("naivebayes")
train_labels <- read_label("train-labels.idx1-ubyte", 60000)
library(naivebayes)
library(klaR)
library(caret)
library(naivebayes)
train_labels <- read_label("train-labels.idx1-ubyte", 60000)
source('Utitilies.R')
train_labels <- read_label("train-labels.idx1-ubyte", 60000)
train_labels <- read_label("train", 60000)
library(readr)
train <- read_csv("/input/train.csv")
train <- read_csv("../input/train.csv")
train <- read_csv("../train.csv")
train <- read_csv("train.csv")
test <- read_csv("test.csv")
test <- read_csv("test.csv")
dim(train)
#dim(train)
table(as.factor(train$label))
naive_bayes(train[,-c(9)], train$labels)
naive_bayes(train[,-c(9)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
source('Reader.R')
library(naivebayes)
library(caret)
train_labels <- read_label("train-labels.idx1-ubyte", 60000)
test_labels <- read_label("t10k-labels.idx1-ubyte", 10000)
print(test_labels)
#untouched gaussian
train_imgs_untouched <- read_image_untouched("train-images.idx3-ubyte", 60000)
source('Utilities.R')
#untouched gaussian
train_imgs_untouched <- read_image_untouched("train-images.idx3-ubyte", 60000)
test_imgs_untouched <- read_image_untouched("t10k-images.idx3-ubyte", 10000)
test_imgs_untouched <- read_image_untouched("t10k-images.idx3-ubyte", 10000)
model_untouched_gaussian <- naive_bayes(train_imgs_untouched, train_labels)
print(model_untouched_gaussian)
confusionMatrix(result_untouched_gaussian, test_labels)
result_untouched_gaussian <- predict(model_untouched_gaussian, test_imgs_untouched)
print(result_untouched_gaussian)
model_untouched_gaussian <- naive_bayes(train[,-c(9)], train$label)
#untouched
train <- read_csv("train.csv")
test <- read_csv("test.csv")
model_untouched_gaussian <- naive_bayes(train[,-c(9)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
model_untouched_gaussian <- naive_bayes(train[,-c(9)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
model_untouched_gaussian <- naive_bayes(train[,-c(9)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
confusionMatrix(result_untouched_gaussian, test_labels)
#untouched
train <- read_csv("train.csv")
test <- read_csv("test.csv")
model_untouched_gaussian <- naive_bayes(train[,-c(9)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(9)])
confusionMatrix(result_untouched_gaussian, test_labels)
model_untouched_gaussian <- naive_bayes(train[,-c(1)], train$label)
print(model_untouched_gaussian)
remove(train)
remove('train','test', 'model_untouched_aussian','result_untouched_gaussian')
rm(list=ls())
#untouched
train <- read_csv("train.csv")
test <- read_csv("test.csv")
model_untouched_gaussian <- naive_bayes(train[,-c(1)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(1)])
confusionMatrix(result_untouched_gaussian, test_labels)
confusionMatrix(result_untouched_gaussian, test$label)
library(readr)
source('Reader.R')
library(naivebayes)
library(caret)
#untouched
train_untouched <- read_image_untouched("train-images.idx3-ubyte", 60000)
#untouched
train_untouched <- read_untouched("train-images.idx3-ubyte", 60000)
train_labels <- read_label("train-labels.idx1-ubyte", 60000)
test_untouched <- read_untouched("t10k-images.idx3-ubyte", 10000)
test_labels <- read_label("t10k-labels.idx1-ubyte", 10000)
model_untouched_g <- naive_bayes(train_untouched, train_labels)
result_untouched_g <- predict(model_untouched_g, test_untouched)
confusionMatrix(result_untouched_g, test_labels)
#bounded
train_bounded <- bound_image(train_untouched)
test_bounded <- bound_image(test_untouched)
model_bounded_gaussian <- naive_bayes(train_bounded, train_labels)
result_bounded_gaussian <- predict(model_bounded_gaussian, test_bounded)
confusionMatrix(result_bounded_gaussian, test_labels)
print( matrix(factor(train_untouched, levels = c(0,1)), 60000, 784))
#untouched
train_untouched[,][train_untouched[,] < 127] <- 0
train_untouched[,][train_untouched[,] >= 127] <- 1
for (i in 1:(28*28)) {
train_untouched[, i] <- factor(train_untouched[, i], levels=c(0,1))
}
print(train_untouched)
#untouched
train <- read_csv("train.csv")
test <- read_csv("test.csv")
model_untouched_gaussian <- naive_bayes(train[,-c(1)], train$label)
result_untouched_gaussian <- predict(model_untouched_gaussian, test[,-c(1)])
confusionMatrix(result_untouched_gaussian, test$label)
print(result_untouched_gaussian)
class(train_untouched)
image(result_untouched_g, useRaster=TRUE, axes=FALSE)
par(mar=c(0, 0, 0, 0))
image(result_untouched_g, useRaster=TRUE, axes=FALSE)
model_untouched_g <- naive_bayes(train_untouched, train_labels)
print(model_untouched_g)
train_untouched
train_labels
train_labels == 0
train_untouched[train_labels == 0]
train_untouched[train_labels == 0,]
sapply(train_untouched[train_labels == 0,], mean, na.rm = T)
confusionMatrix(result_untouched_g, test_labels)
#untouched
train_untouched[,][train_untouched[,] < 127] <- 0
train_untouched[,][train_untouched[,] >= 127] <- 1
for (i in 1:(28*28)) {
train_untouched[, i] <- factor(train_untouched[, i], levels=c(0,1))
}
matrix(factor(train_untouched, levels = c(0,1)), 60000, 784)
test_untouched[,][test_untouched[,] < 127] <- 0
test_untouched[,][test_untouched[,] >= 127] <- 1
#test_untouched_factored <- matrix(factor(test_untouched, levels = c(0,1)), 10000, 784)
for (i in 1:(28*28)) {
test_untouched[, i] <- factor(test_untouched[, i], levels=c(0,1))
}
model_untouched_b <- naive_bayes(train_untouched, train_labels, laplace=1)
result_untouched_b <- predict(model_untouched_b, test_untouched)
confusionMatrix(result_untouched_b, test_labels)
#untouched
train_untouched[,][train_untouched[,] < 127] <- 0
train_untouched[,][train_untouched[,] >= 127] <- 1
for (i in 1:(28*28)) {
train_untouched[, i] <- factor(train_untouched[, i], levels=c(0,1))
}
test_untouched[,][test_untouched[,] < 127] <- 0
test_untouched[,][test_untouched[,] >= 127] <- 1
for (i in 1:(28*28)) {
test_untouched[, i] <- factor(test_untouched[, i], levels=c(0,1))
}
model_untouched_b <- naive_bayes(train_untouched, train_labels, laplace=1)
result_untouched_b <- predict(model_untouched_b, test_untouched)
confusionMatrix(result_untouched_b, test_labels)
#bounded
train_bounded[,][train_bounded[,] < 127] <- 0
train_bounded[,][train_bounded[,] >= 127] <- 1
for (i in 1:(20*20)) {
train_bounded[,i] <- factor(train_bounded[,i], levels = c(0,1))
}
test_bounded[,][test_bounded[,] < 127] <- 0
test_bounded[,][test_bounded[,] >= 127] <- 1
for (i in 1:(20*20)) {
test_bounded[,i] <- factor(test_bounded[,i], levels = c(0,1))
}
model_bounded_b <- naive_bayes(train_bounded, train_labels, laplace=1)
result_bounded_b <- predict(model_bounded_b, test_bounded)
confusionMatrix(result_bounded_b, test_labels)
tr_labels <- read_label("train-labels.idx1-ubyte", 60000)
source('Reader.R')
library(caret)
library(h2o)
h2o.init()
tr_labels <- read_label("train-labels.idx1-ubyte", 60000)
te_labels <- read_label("t10k-labels.idx1-ubyte", 10000)
#ut
tr_ut <- read_ut("train-images.idx3-ubyte", 60000)
df_tr_ut <- data.frame(tr_ut)
df_tr_ut$label <- tr_labels
h2o_df_tr_ut <- as.h2o(df_tr_ut)
features<-colnames(df_tr_ut)[!(colnames(df_tr_ut) %in% c("label", "Label"))]
#10
rfut_4_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 4, training_frame=h2o_df_tr_ut)
rfut_8_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 8, training_frame=h2o_df_tr_ut)
rfut_16_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 16, training_frame=h2o_df_tr_ut)
install.packages("h2o")
library(caret)
library(h2o)
h2o.init()
tr_labels <- read_label("train-labels.idx1-ubyte", 60000)
te_labels <- read_label("t10k-labels.idx1-ubyte", 10000)
#ut
tr_ut <- read_ut("train-images.idx3-ubyte", 60000)
df_tr_ut <- data.frame(tr_ut)
df_tr_ut$label <- tr_labels
h2o_df_tr_ut <- as.h2o(df_tr_ut)
features<-colnames(df_tr_ut)[!(colnames(df_tr_ut) %in% c("label", "Label"))]
#10
rfut_4_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 4, training_frame=h2o_df_tr_ut)
rfut_8_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 8, training_frame=h2o_df_tr_ut)
rfut_16_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 16, training_frame=h2o_df_tr_ut)
h2o.init()
h2o.init()
tr_labels <- read_label("train-labels.idx1-ubyte", 60000)
te_labels <- read_label("t10k-labels.idx1-ubyte", 10000)
#ut
tr_ut <- read_ut("train-images.idx3-ubyte", 60000)
#ut
tr_ut <- read_untouched("train-images.idx3-ubyte", 60000)
df_tr_ut <- data.frame(tr_ut)
df_tr_ut$label <- tr_labels
h2o_df_tr_ut <- as.h2o(df_tr_ut)
features<-colnames(df_tr_ut)[!(colnames(df_tr_ut) %in% c("label", "Label"))]
#10
rfut_4_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 4, training_frame=h2o_df_tr_ut)
rfut_8_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 8, training_frame=h2o_df_tr_ut)
#20
rfut_4_20 <- h2o.randomForest(x=features, y="label", ntrees = 20, max_depth = 4, training_frame=h2o_df_tr_ut)
rfut_8_20 <- h2o.randomForest(x=features, y="label", ntrees = 20, max_depth = 8, training_frame=h2o_df_tr_ut)
rfut_16_20 <- h2o.randomForest(x=features, y="label", ntrees = 20, max_depth = 16, training_frame=h2o_df_tr_ut)
#30
rfut_4_30 <- h2o.randomForest(x=features, y="label", ntrees = 30, max_depth = 4, training_frame=h2o_df_tr_ut)
rfut_8_30 <- h2o.randomForest(x=features, y="label", ntrees = 30, max_depth = 8, training_frame=h2o_df_tr_ut)
rfut_16_30 <- h2o.randomForest(x=features, y="label", ntrees = 30, max_depth = 16, training_frame=h2o_df_tr_ut)
te_imgs_ut <- read_untouched("t10k-images.idx3-ubyte", 10000)
df_te_ut <- data.frame(te_imgs_ut)
h2o_df_te_ut <- as.h2o(df_te_ut)
predictions<-as.data.frame(h2o.predict(rfut_4_10,h2o_df_te_ut))
View(predictions)
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_8_10,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_16_10,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_4_20,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_8_20,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_16_20,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_4_30,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_8_30,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfut_16_30,h2o_df_te_ut))
confusionMatrix(predictions[,1], te_labels)
##################################################################################################
#bounded
tr_imgs_bounded <- bound_image(tr_ut)
##################################################################################################
#bounded
tr_imgs_bounded <- bound_image(tr_ut)
df_tr_bounded <- data.frame(train_bounded)
df_tr_bounded$label <- tr_labels
h2o_df_tr_bounded <- as.h2o(df_tr_bounded)
features<-colnames(df_tr_bounded)[!(colnames(df_tr_bounded) %in% c("label", "Label"))]
#Bounded 10
rfBounded_4_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 4, training_frame=h2o_df_tr_bounded)
rfBounded_8_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 8, training_frame=h2o_df_tr_bounded)
rfBounded_16_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 16, training_frame=h2o_df_tr_bounded)
#confusionMatrix(result_untouched_g, test_labels)
write.table(result_untouched_g, "hwu63_1.csv", sep = ",", col.names = T, append = T)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
train_untouched <- train[,-c(1)]
train_labels <- train[,1]
test_untouched <- test[,-c(1)]
test_labels <- test[,1]
model_untouched_g <- naive_bayes(train_untouched, train_labels)
result_untouched_g <- predict(model_untouched_g, test_untouched)
train_labels <- train[,1]
test_untouched <- read_csv("test.csv")
model_untouched_g <- naive_bayes(train_untouched, train_labels)
result_untouched_g <- predict(model_untouched_g, test_untouched)
#confusionMatrix(result_untouched_g, test_labels)
write.table(result_untouched_g, "hwu63_1.csv", sep = ",", col.names = T, append = T)
class(result_untouched_g)
#confusionMatrix(result_untouched_g, test_labels)
write.table(result_untouched_g, "hwu63_1.csv", sep = ",", col.names = c("ImageId", "Label"))
data[,1]=[1:length(result_untouched_g)]
data[,1]=1:length(result_untouched_g)
#confusionMatrix(result_untouched_g, test_labels)
data.table(ImageId=1:length(result_untouched_g), Label= result_untouched_g)
write.table(data, "hwu63_1.csv", sep = ",", col.names = T)
#confusionMatrix(result_untouched_g, test_labels)
data.table(ImageId=1:length(result_untouched_g), Label= result_untouched_g)
#confusionMatrix(result_untouched_g, test_labels)
table(ImageId=1:length(result_untouched_g), Label= result_untouched_g)
#confusionMatrix(result_untouched_g, test_labels)
length(result_untouched_g)
model_untouched_g <- naive_bayes(train_untouched, train_labels)
result_untouched_g <- predict(model_untouched_g, test_untouched)
train <- read_csv("train.csv")
test_untouched <- read_csv("test.csv")
train_untouched <- train[,-c(1)]
train_labels <- train[,1]
model_untouched_g <- naive_bayes(train_untouched, train_labels)
model_untouched_g <- naive_bayes(train_untouched, train_labels)
train_untouched <- train[,-c(1)]
print(train_untouched)
train_labels <- train[,1]
model_untouched_g <- naive_bayes(train_untouched, train_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_4_10,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_8_10,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_16_10,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_4_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_8_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_16_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
te_imgs_bounded <- bound_image(te_imgs_ut)
#Bounded 10
rfBounded_4_10 <- h2o.randomForest(x=features, y="label", ntrees = 10, max_depth = 4, training_frame=h2o_df_tr_bounded)
df_te_bounded <- data.frame(te_imgs_bounded)
h2o_df_te_bounded <- as.h2o(df_te_bounded)
predictions<-as.data.frame(h2o.predict(rfBounded_4_10,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_8_10,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_16_10,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_4_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_8_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_16_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
rfBounded_8_30 <- h2o.randomForest(x=features, y="label", ntrees = 30, max_depth = 8, training_frame=h2o_df_tr_bounded)
rfBounded_16_30 <- h2o.randomForest(x=features, y="label", ntrees = 30, max_depth = 16, training_frame=h2o_df_tr_bounded)
predictions<-as.data.frame(h2o.predict(rfBounded_8_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
predictions<-as.data.frame(h2o.predict(rfBounded_16_30,h2o_df_te_bounded))
confusionMatrix(predictions[,1], te_labels)
#confusionMatrix(result_untouched_g, test_labels)
dim(test_untouched)
data.table(ImageId=1:28000, Label= result_untouched_g)
data<-table(ImageId=1:28000, Label= result_untouched_g)
#untouched
train_untouched <- read_untouched("train-images.idx3-ubyte", 60000)
train_labels <- read_label("train-labels.idx1-ubyte", 60000)
test_untouched <- read_untouched("t10k-images.idx3-ubyte", 10000)
test_labels <- read_label("t10k-labels.idx1-ubyte", 10000)
#confusionMatrix(result_untouched_g, test_labels)
dim(test_untouched)
data<-table(ImageId=1:28000, Label= result_untouched_g)
train <- read_csv("train.csv")
data<-table(ImageId=1:10000, Label= result_untouched_g)
data<-table(ImageId=1:10001, Label= result_untouched_g)
#confusionMatrix(result_untouched_g, test_labels)
dim(test_untouched)
data<-table(ImageId=1:10000, Label= result_untouched_g)
data<-table(ImageId=[1:10000], Label= result_untouched_g)
